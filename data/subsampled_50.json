[{"question_id": 350, "db_id": "card_games", "question": "State the alternative languages available for card named Annul numbered 29.", "evidence": "annul refers to name = 'annul'; numbered 29 refers to number = '29';", "SQL": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29", "difficulty": "simple"}, {"question_id": 111, "db_id": "financial", "question": "How many accounts were opened in Litomerice in 1996?", "evidence": "A2 refers to district name; Litomerice is one of district names.", "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'", "difficulty": "simple"}, {"question_id": 623, "db_id": "codebase_community", "question": "How many elders obtained the \"Supporter\" badge?", "evidence": "\"Supporter\" is the Name of badge;\u00a0 elders refers to Age > 65", "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'", "difficulty": "simple"}, {"question_id": 600, "db_id": "codebase_community", "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount", "SQL": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217", "difficulty": "simple"}, {"question_id": 575, "db_id": "codebase_community", "question": "What is the badge name that user 'SilentGhost' obtained?", "evidence": "\"SilentGhost\" is the DisplayName of user;", "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'", "difficulty": "simple"}, {"question_id": 387, "db_id": "card_games", "question": "What are the cards for set OGW? State the colour for these cards.", "evidence": "set OGW refers to setCode = 'OGW';", "SQL": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )", "difficulty": "simple"}, {"question_id": 326, "db_id": "toxicology", "question": "Which molecule consisted of Sulphur atom with double bond?", "evidence": "sulphur refers to element - 's'; double bond refers to bond_type = ' = ';", "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='", "difficulty": "simple"}, {"question_id": 1366, "db_id": "student_club", "question": "List all the members who attended the event \"October Meeting\".", "evidence": "'October Meeting' is an event name;", "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'", "difficulty": "simple"}, {"question_id": 291, "db_id": "toxicology", "question": "How many chemical compounds in the database are identified as carcinogenic.", "evidence": "label = '+' mean molecules are carcinogenic;", "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'", "difficulty": "simple"}, {"question_id": 971, "db_id": "formula_1", "question": "Please state the reference name of the oldest German driver.", "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.", "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1", "difficulty": "simple"}, {"question_id": 139, "db_id": "financial", "question": "How many high-level credit cards have \"disponent\" type of disposition?", "evidence": "High-level credit cards refers to the cards with the gold type.", "SQL": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'DISPONENT'", "difficulty": "simple"}, {"question_id": 1511, "db_id": "debit_card_specializing", "question": "For the customers who paid in the euro, what is their average total price of the transactions?", "evidence": "", "SQL": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'", "difficulty": "simple"}, {"question_id": 1411, "db_id": "student_club", "question": "State what kind of expenses that Sacha Harrison incurred?", "evidence": "kind of expenses refers to expense_description", "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'", "difficulty": "simple"}, {"question_id": 549, "db_id": "codebase_community", "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.", "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId", "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'", "difficulty": "simple"}, {"question_id": 591, "db_id": "codebase_community", "question": "How many users are awarded with supporter badge during year 2011?", "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011", "SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'", "difficulty": "simple"}, {"question_id": 1268, "db_id": "thrombosis_prediction", "question": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.", "evidence": "abnormal anti-SM refers to SM NOT IN('-', '+-'); youngest refers to MAX(Birthday);", "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3", "difficulty": "simple"}, {"question_id": 1158, "db_id": "thrombosis_prediction", "question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.", "evidence": "who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'", "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250", "difficulty": "moderate"}, {"question_id": 35, "db_id": "california_schools", "question": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?", "evidence": "Charted school means `Charter School (Y/N)` = 1 in the table frpm; Students enrolled in grades 1 through 12 refers to `Enrollment (K-12)`", "SQL": "SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 1", "difficulty": "moderate"}, {"question_id": 1098, "db_id": "european_football_2", "question": "What is Ajax's highest chance creation passing score and what is it classified as?", "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified as chanceCreationPassingClass", "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1", "difficulty": "moderate"}, {"question_id": 303, "db_id": "toxicology", "question": "How many double bonds does TR006 have and is it carcinogenic?", "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; double bond refers to bond_type = ' = ';", "SQL": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label", "difficulty": "moderate"}, {"question_id": 1272, "db_id": "thrombosis_prediction", "question": "Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.", "evidence": "first patient refers to ID with MIN(`First Date`); abnormal anti-SSA refers to SSA NOT IN('-', '+-');", "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1", "difficulty": "moderate"}, {"question_id": 1201, "db_id": "thrombosis_prediction", "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?", "evidence": "born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to diagnosis; women refers to SEX = 'F'; calculation = DIVIDE((SEX = 'F'), COUNT(SEX)) where YEAR(BIRTHDAY) = '1980' AND diagnosis = 'RA' MULTIPLY 100", "SQL": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'", "difficulty": "moderate"}, {"question_id": 1266, "db_id": "thrombosis_prediction", "question": "Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.", "evidence": "youngest patient refers to MAX(Birthday); abnormal anti-ribonuclear protein level refers to RNP NOT IN('-', '+-'); date of birth refers to Birthday;", "SQL": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1", "difficulty": "moderate"}, {"question_id": 1085, "db_id": "european_football_2", "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?", "evidence": "player who perform best in crossing actions refers to MAX(crossing);", "SQL": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1", "difficulty": "moderate"}, {"question_id": 766, "db_id": "superhero", "question": "What is the hero's full name with the highest attribute in strength?", "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';", "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1", "difficulty": "moderate"}, {"question_id": 347, "db_id": "card_games", "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.", "evidence": "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist;", "SQL": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'", "difficulty": "moderate"}, {"question_id": 939, "db_id": "formula_1", "question": "How many drivers from the USA participated in the 2008 Australian Grand Prix?", "evidence": "from the USA refers to nationality = 'American'", "SQL": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian GrAND Prix' AND T1.nationality = 'American' AND T3.year = 2008", "difficulty": "moderate"}, {"question_id": 1124, "db_id": "european_football_2", "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.", "evidence": "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';", "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'", "difficulty": "moderate"}, {"question_id": 483, "db_id": "card_games", "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.", "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'", "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'", "difficulty": "moderate"}, {"question_id": 25, "db_id": "california_schools", "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?", "evidence": "Average of average math = sum(average math scores) / count(schools).", "SQL": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400", "difficulty": "moderate"}, {"question_id": 267, "db_id": "toxicology", "question": "List down the bond type for molecules from molecule id TR000 to TR050.", "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';", "SQL": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'", "difficulty": "moderate"}, {"question_id": 797, "db_id": "superhero", "question": "Which superheroes have blue eyes with brown hair?", "evidence": "which superheroes refers to superhero_name; blue eyes refers to eye_colour_id = 7; brown hair refers to hair_colour_id = 9;", "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'", "difficulty": "moderate"}, {"question_id": 760, "db_id": "superhero", "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?", "evidence": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_id = 13; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)", "SQL": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180", "difficulty": "challenging"}, {"question_id": 586, "db_id": "codebase_community", "question": "Which user added a bounty amount of 50 to the post title mentioning variance?", "evidence": "\"bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName", "SQL": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'", "difficulty": "challenging"}, {"question_id": 307, "db_id": "toxicology", "question": "Name the atoms' elements that form bond TR000_2_3.", "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium", "SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'", "difficulty": "challenging"}, {"question_id": 337, "db_id": "toxicology", "question": "List the element and bond type included in the molecule with molecule ID of TR016.", "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';", "SQL": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR016'", "difficulty": "challenging"}, {"question_id": 1247, "db_id": "thrombosis_prediction", "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?", "evidence": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC between 3.5 and 9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.", "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'", "difficulty": "challenging"}, {"question_id": 231, "db_id": "toxicology", "question": "Which bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic?", "evidence": "TR018 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "SQL": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR018' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T", "difficulty": "challenging"}, {"question_id": 772, "db_id": "superhero", "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.", "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';", "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'", "difficulty": "challenging"}, {"question_id": 944, "db_id": "formula_1", "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?", "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100%; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null", "SQL": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)", "difficulty": "challenging"}, {"question_id": 896, "db_id": "formula_1", "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.", "evidence": "DIVIDE(COUNT(raceId) where surname = 'Hamilton', year >= 2010 and position>1), (COUNT(raceId) where surname = 'Hamilton', year >= 2010) as percentage;", "SQL": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010", "difficulty": "challenging"}, {"question_id": 240, "db_id": "toxicology", "question": "List all the elements of the toxicology of the molecule \"TR004\".", "evidence": "TR004 is the molecule id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium", "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'", "difficulty": "challenging"}, {"question_id": 1036, "db_id": "european_football_2", "question": "List the long name of teams with above-average build-up play passing in 2012.", "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL) < buildUpPlayPassing; in 2012 refers to strftime('%Y', date) = '2012';", "SQL": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE SUBSTR(t2.`date`, 1, 4) = '2012' )", "difficulty": "challenging"}, {"question_id": 1161, "db_id": "thrombosis_prediction", "question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?", "evidence": "in-patient refers to Admission = '+'; age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'; average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)", "SQL": "SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'", "difficulty": "challenging"}]